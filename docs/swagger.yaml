basePath: /api/v1
definitions:
  models.Customer:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      shop:
        $ref: '#/definitions/models.Shop'
      shopID:
        type: integer
      updatedAt:
        type: string
    type: object
  models.LoginReq:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.Shop:
    properties:
      address:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      owner:
        $ref: '#/definitions/models.User'
      ownerID:
        type: integer
      phone:
        type: string
      updatedAt:
        type: string
    type: object
  models.Transaction:
    properties:
      amount:
        type: number
      category:
        type: string
      createdAt:
        type: string
      date:
        type: string
      description:
        type: string
      id:
        type: integer
      shop:
        $ref: '#/definitions/models.Shop'
      shopID:
        type: integer
      type:
        type: string
      updatedAt:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        description: e.g., admin, owner, employee etc.
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: esezer@egetechno.com
    name: API SUPPORT
    url: http://www.swagger.io/support
  description: finance app for tradesman
  license:
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Defterdar-go
  version: "1.0"
paths:
  /customers:
    get:
      consumes:
      - application/json
      description: Retrieve a list of customers for the authenticated user's shop
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Customer'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to find customers
          schema:
            type: string
      summary: Get list of customers
      tags:
      - Customers
    post:
      consumes:
      - application/json
      description: Create a new customer associated with the authenticated user's
        shop
      parameters:
      - description: Customer body
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/models.Customer'
      produces:
      - application/json
      responses:
        "201":
          description: Customer created successfully
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to create customer
          schema:
            type: string
      summary: Add a new customer
      tags:
      - Customers
  /customers/{customer_id}:
    delete:
      consumes:
      - application/json
      description: Delete a customer from the authenticated user's shop
      parameters:
      - description: Customer ID
        in: path
        name: customer_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Customer deleted successfully
          schema:
            type: string
        "400":
          description: Invalid customer id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to delete customer
          schema:
            type: string
      summary: Delete a customer
      tags:
      - Customers
    get:
      consumes:
      - application/json
      description: Retrieve a customer's details for the authenticated user's shop
      parameters:
      - description: Customer ID
        in: path
        name: customer_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Customer'
        "400":
          description: Invalid customer id
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to find customer
          schema:
            type: string
      summary: Get a customer
      tags:
      - Customers
    put:
      consumes:
      - application/json
      description: Update a customer's details for the authenticated user's shop
      parameters:
      - description: Customer ID
        in: path
        name: customer_id
        required: true
        type: integer
      - description: Updated customer body
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/models.Customer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Customer'
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to update customer
          schema:
            type: string
      summary: Update an existing customer
      tags:
      - Customers
  /shop:
    delete:
      consumes:
      - application/json
      description: Delete the shop and all related records for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Shop deleted successfully
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to delete shop
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete shop
      tags:
      - shop
    get:
      consumes:
      - application/json
      description: Get details of the shop for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Shop'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to get shop
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get shop details
      tags:
      - shop
    post:
      consumes:
      - application/json
      description: Create a new shop for the user
      parameters:
      - description: Shop
        in: body
        name: shop
        required: true
        schema:
          $ref: '#/definitions/models.Shop'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Shop'
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to create shop
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create a new shop
      tags:
      - shop
    put:
      consumes:
      - application/json
      description: Update the details of the shop for the authenticated user
      parameters:
      - description: Shop
        in: body
        name: shop
        required: true
        schema:
          $ref: '#/definitions/models.Shop'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Shop'
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to update shop
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update shop details
      tags:
      - shop
  /transactions:
    get:
      consumes:
      - application/json
      description: Retrieve a list of transactions for the authenticated user's shop
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Transaction'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to find transactions
          schema:
            type: string
      summary: Get list of transactions
      tags:
      - Transactions
    post:
      consumes:
      - application/json
      description: Record a new transaction associated with the authenticated user's
        shop
      parameters:
      - description: Transaction body
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/models.Transaction'
      produces:
      - application/json
      responses:
        "201":
          description: Transaction created successfully.
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to create transaction
          schema:
            type: string
      summary: Create a new transaction
      tags:
      - Transactions
  /transactions/{transaction_id}:
    delete:
      consumes:
      - application/json
      description: Delete a transaction by its ID
      parameters:
      - description: Transaction ID
        in: path
        name: transaction_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Transaction deleted successfully.
          schema:
            type: string
        "400":
          description: Invalid transaction id
          schema:
            type: string
        "404":
          description: Failed to find transaction
          schema:
            type: string
        "500":
          description: Failed to delete transaction
          schema:
            type: string
      summary: Delete a transaction
      tags:
      - Transactions
    get:
      consumes:
      - application/json
      description: Retrieve a transaction by its ID
      parameters:
      - description: Transaction ID
        in: path
        name: transaction_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: Invalid transaction id
          schema:
            type: string
        "404":
          description: Failed to find transaction
          schema:
            type: string
        "500":
          description: Failed to encode transaction
          schema:
            type: string
      summary: Get a transaction
      tags:
      - Transactions
    put:
      consumes:
      - application/json
      description: Update an existing transaction details associated with the authenticated
        user's shop
      parameters:
      - description: Transaction ID
        in: path
        name: transaction_id
        required: true
        type: integer
      - description: Updated transaction body
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/models.Transaction'
      produces:
      - application/json
      responses:
        "200":
          description: Transaction updated successfully.
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Failed to find transaction
          schema:
            type: string
        "500":
          description: Failed to update transaction
          schema:
            type: string
      summary: Update an existing transaction
      tags:
      - Transactions
  /user/login:
    post:
      consumes:
      - application/json
      description: Register a new user with name, email, password, role
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginReq'
      produces:
      - application/json
      responses:
        "201":
          description: 'token: '
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Login a new user
      tags:
      - Auth
  /user/register:
    post:
      consumes:
      - application/json
      description: Register a new user with name, email, password, role (e.g. owner,
        employee)
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully.
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Register a new user
      tags:
      - Auth
swagger: "2.0"
