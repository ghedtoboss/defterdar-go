basePath: /api/v1
definitions:
  models.Customer:
    properties:
      address:
        type: string
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  models.CustomerTransaction:
    properties:
      amount:
        type: number
      createdAt:
        type: string
      customer:
        $ref: '#/definitions/models.Customer'
      customerID:
        type: integer
      description:
        type: string
      id:
        type: integer
      transactionType:
        description: e.g., credit, debit
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: integer
    type: object
  models.LoginReq:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.PasswordUpdateReq:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      role:
        description: e.g., admin, user, etc.
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: esezer@egetechno.com
    name: API SUPPORT
    url: http://www.swagger.io/support
  description: finance app for tradesman
  license:
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Defterdar-go
  version: "1.0"
paths:
  /transaction:
    post:
      consumes:
      - application/json
      description: Create a new transaction.
      parameters:
      - description: Transaction
        in: body
        name: Transaction
        required: true
        schema:
          $ref: '#/definitions/models.CustomerTransaction'
      produces:
      - application/json
      responses:
        "201":
          description: Transaction created successfully.
          schema:
            type: string
        "400":
          description: Invalid input.
          schema:
            type: string
        "500":
          description: Failed to create transaction
          schema:
            type: string
      summary: Create a transaction
      tags:
      - Transaction
  /transaction/{transaction_id}:
    get:
      consumes:
      - application/json
      description: Get a transaction.
      parameters:
      - description: Transaction
        in: body
        name: Transaction
        required: true
        schema:
          $ref: '#/definitions/models.CustomerTransaction'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CustomerTransaction'
        "400":
          description: Failed to create transaction
          schema:
            type: string
        "404":
          description: Failed to get transaction.
          schema:
            type: string
      summary: Get a transaction
      tags:
      - Transaction
  /user/get-profile:
    get:
      consumes:
      - application/json
      description: Pulls the user's own profile information.
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input.
          schema:
            type: string
        "404":
          description: User not found.
          schema:
            type: string
      summary: GetProfile a user
      tags:
      - User
  /user/login:
    post:
      consumes:
      - application/json
      description: Register a new user with name, email, password, role
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginReq'
      produces:
      - application/json
      responses:
        "201":
          description: 'token: '
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Login a new user
      tags:
      - Auth
  /user/register:
    post:
      consumes:
      - application/json
      description: Register a new user with name, email, password, role
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully.
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Register a new user
      tags:
      - Auth
  /user/update-password:
    put:
      consumes:
      - application/json
      description: Update the user's password.
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.PasswordUpdateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Password updated successfully.
          schema:
            type: string
        "400":
          description: Invalid input.
          schema:
            type: string
        "404":
          description: User not found.
          schema:
            type: string
      summary: UpdatePassword a user
      tags:
      - User
  /user/update-profile:
    put:
      consumes:
      - application/json
      description: Update the user's profile.
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: User updated successfully.
          schema:
            type: string
        "400":
          description: Invalid input.
          schema:
            type: string
        "404":
          description: User not found.
          schema:
            type: string
      summary: UpdateProfile a user
      tags:
      - User
  /users/{user_id}/delete:
    delete:
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: User deleted successfully
          schema:
            type: string
        "400":
          description: Invalid user ID
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Delete a user
      tags:
      - User
  /users/close-account:
    delete:
      description: Close account
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: Account closed successfully.
          schema:
            type: string
        "400":
          description: Invalid user ID
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Close a user own account
      tags:
      - User
swagger: "2.0"
